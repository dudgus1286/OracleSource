-- employees 에서 전체 내용 조회
SELECT *
FROM EMPLOYEES e ;

-- first name, last name, job_id 조회
SELECT FIRST_NAME , LAST_NAME , JOB_ID FROM EMPLOYEES e ;

-- 사원번호가 176인 사람의 LAST_NAME 과 DEPARTMENT_ID 조회
SELECT LAST_NAME , DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE e.EMPLOYEE_ID = 176 ;

-- 연봉이 12000 이상 되는 직원들의 LAST_NAME과 SALARY 조회
SELECT LAST_NAME , SALARY 
FROM EMPLOYEES e 
WHERE SALARY >= 12000 ;

-- 연봉이 5000 에서 12000 의 범위 이외인 사람들의 LAST_NAME과 SALARY 조회
SELECT LAST_NAME , SALARY 
FROM EMPLOYEES e 
WHERE SALARY < 5000 OR SALARY > 12000 ;




-- 부서번호가 20, 50 부서에서 근무하는 사원들의 LAST_NAME,DEPARTMENT_ID 조회
SELECT LAST_NAME , DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (20, 50 );

-- 부서번호가 20, 50 부서에서 근무하는 사원들의 LAST_NAME,DEPARTMENT_ID 조회
-- 오름차순
SELECT LAST_NAME , DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (20, 50 )
ORDER BY LAST_NAME ASC, DEPARTMENT_ID ASC ;

-- 커미션을 버는 모든 사원들의 성씨, SALARY, COMMISSION_PCT 조회
SELECT LAST_NAME , SALARY , COMMISSION_PCT 
FROM EMPLOYEES e 
WHERE COMMISSION_PCT > 0 
ORDER BY SALARY DESC , COMMISSION_PCT DESC ;

-- SALARY 가 2500, 3500, 7000 이 아니며 JOB 이 SA_REP 나 ST_CLERK 사원 조회
SELECT *
FROM EMPLOYEES e 
WHERE SALARY NOT IN (2500, 3500, 7000) AND
JOB_ID IN ('SA_REP', 'ST_CLERK') ;

-- 2017-01-01 ~ 2017-12-31 사이에 고용된 사원들의 LAST_NAME, EMPLOYEE_ID, HIRE_DATE 조회
-- HIRE_DATE 내림차순 정렬
SELECT LAST_NAME, EMPLOYEE_ID, HIRE_DATE
FROM EMPLOYEES e 
WHERE HIRE_DATE >= '2017-01-01' AND HIRE_DATE <= '2017-12-31'
ORDER BY HIRE_DATE DESC;



-- BETWEEN A AND B
-- 부서번호가 20, 50인 부서에서 근무하고, 연봉이 5000 ~ 12000 사이인 사원들의 LAST_NAME, SALARY 조회
-- SALARY 오름차순
SELECT LAST_NAME, SALARY
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN(20, 50) AND SALARY BETWEEN 5000 AND 12000
ORDER BY SALARY ASC ;

-- 2017-01-01 ~ 2017-12-31 사이에 고용된 사원들의 LAST_NAME, EMPLOYEE_ID, HIRE_DATE 조회
-- HIRE_DATE 내림차순 정렬
SELECT LAST_NAME, EMPLOYEE_ID, HIRE_DATE
FROM EMPLOYEES e 
WHERE HIRE_DATE BETWEEN '2017-01-01' AND '2017-12-31'
ORDER BY HIRE_DATE DESC ;


-- 연봉이 5000 에서 12000 의 범위 이외인 사람들의 LAST_NAME과 SALARY 조회
SELECT LAST_NAME , SALARY 
FROM EMPLOYEES e 
WHERE SALARY NOT BETWEEN 5000 AND 12000 ;




-- LAST_NAME 에 u 가 포함되는 사원들의 사번, 성씨 조회
SELECT EMPLOYEE_ID , LAST_NAME
FROM EMPLOYEES e
WHERE LAST_NAME LIKE '%u%';

-- 성씨의 4번째 문자가 a 인 사원들의 사번, 성씨 조회
SELECT EMPLOYEE_ID , LAST_NAME 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '___a%';

-- 성씨에 a, 혹은 e 글자가 들어있는 사원들의 사번, 성씨 조회 후 성씨 기준 오름차순 조회
SELECT EMPLOYEE_ID , LAST_NAME 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%a%' OR LAST_NAME LIKE '%e%'
ORDER BY LAST_NAME ASC ;

-- 성씨의 a 와 e 글자가 들어있는 사원들의 사번, 성씨 조회 후 성씨 기준 오름차순 조회
SELECT EMPLOYEE_ID , LAST_NAME 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%a%' AND LAST_NAME LIKE '%e%'
ORDER BY LAST_NAME ASC ;
-- WHERE LAST_NAME LIKE '%a%e%' or LAST_NAME LIKE '%e%a%'
SELECT EMPLOYEE_ID , LAST_NAME 
FROM EMPLOYEES e 
WHERE LAST_NAME LIKE '%a%e%' or LAST_NAME LIKE '%e%a%'
ORDER BY LAST_NAME ASC ;


-- 2024-01-24
-- 매니저가 없는 사람들의 성씨, JOB_ID 조회
SELECT LAST_NAME , JOB_ID 
FROM EMPLOYEES e 
WHERE MANAGER_ID IS NULL;

-- ST_CLERK 인 JOB_ID 를 가진 사원이 없는 부서 ID 조회 (단 부서번호가 NULL인 사원 제외)
SELECT DEPARTMENT_ID
FROM EMPLOYEES e 
WHERE JOB_ID != 'ST_CLERK' AND DEPARTMENT_ID IS NOT NULL;
-- NOT IN (...) 사용 및 중복번호 제거
SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES e 
WHERE JOB_ID NOT IN ( 'ST_CLERK' ) AND DEPARTMENT_ID IS NOT NULL;

-- COMMISSION_PCT 가 NULL 이 아닌 사원들 중에서
-- COMMISSION = SALARY * COMMISSION_PCT를 구하여 사원번호, 이름, 잡아이디를 조회
SELECT EMPLOYEE_ID , FIRST_NAME , JOB_ID, (SALARY * COMMISSION_PCT ) AS "COMMISSION" 
FROM EMPLOYEES e 
WHERE COMMISSION_PCT IS NOT NULL;
-- NULL 값을 제외하지 않고 계산하게 한 경우 : NULL * 숫자 = NULL
SELECT EMPLOYEE_ID , FIRST_NAME , JOB_ID, SALARY, (SALARY * COMMISSION_PCT ) AS "COMMISSION" 
FROM EMPLOYEES e ;


-- 이름이 'Curtis' 인 사원의 이름, 성씨, 이메일, 폰번호, 직책아이디를 조회
-- 단 직책아이디 결과는 소문자로 출력
SELECT FIRST_NAME , LAST_NAME , EMAIL , PHONE_NUMBER , LOWER(JOB_ID)
FROM EMPLOYEES e
WHERE FIRST_NAME = 'Curtis' ;

-- 부서번호가 60, 70, 80, 90 인 사원들의 사원번호, 이름, 채용일자, 직책아이디 조회
-- 단 직책아이디가 IT_PROG 인 사원의 경우 프로그래머로 변경하여 출력
SELECT EMPLOYEE_ID , FIRST_NAME , HIRE_DATE , REPLACE(JOB_ID, 'IT_PROG', '프로그래머')
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN(60, 70, 80, 90) ;

-- 직책 아이디가 AD_PRES, PU_CLERK 인 사원들의 사원번호, 이름, 직책 아이디 조회
-- 단 사원명은 이름과 성씨를 공백을 포함하여 연결
SELECT EMPLOYEE_ID , FIRST_NAME || ' ' || LAST_NAME AS NAME , JOB_ID 
FROM EMPLOYEES e 
WHERE JOB_ID IN('AD_PRES', 'PU_CLERK') ;

-- 2024-01-25
-- 실습 4
SELECT
	LAST_NAME ,
	SALARY 
	,
	CASE 
		WHEN SALARY >= 0
		AND SALARY <= 1999 THEN '0.00'
		WHEN SALARY >= 2000
		AND SALARY <= 3999 THEN '0.09'
		WHEN SALARY >= 4000
		AND SALARY <= 5999 THEN '0.2'
		WHEN SALARY >= 6000
		AND SALARY <= 7999 THEN '0.3'
		WHEN SALARY >= 8000
		AND SALARY <= 9999 THEN '0.4'
		WHEN SALARY >= 10000
		AND SALARY <= 11999 THEN '0.42'
		WHEN SALARY >= 12000
		AND SALARY <= 13999 THEN '0.44'
		ELSE '0.45'
	END AS TAX_RATE
FROM
	EMPLOYEES
WHERE
	DEPARTMENT_ID = 80 ;
	
-- TRUNC 함수 사용
SELECT
	LAST_NAME ,
	SALARY 
	,
	CASE TRUNC(SALARY/2000, 0)
		WHEN 0 THEN '0'
		WHEN 1 THEN '0.09'
		WHEN 2 THEN '0.2'
		WHEN 3 THEN '0.3'
		WHEN 4 THEN '0.4'
		WHEN 5 THEN '0.42'
		WHEN 6 THEN '0.44'
		ELSE '0.45'
	END AS TAX_RATE
FROM
	EMPLOYEES
WHERE
	DEPARTMENT_ID = 80 ;
	
-- 최대 연봉 - 최소 연봉 차이 조회
SELECT MAX(SALARY) - MIN(SALARY) AS GAP
FROM EMPLOYEES e ;

-- 매니저로 근무하는 사원 총 수 조회(매니저번호 중복 제거)
SELECT COUNT(DISTINCT MANAGER_ID) 
FROM EMPLOYEES e ;


-- 부서별 직원수(부서번호 기준 오름차순)
SELECT DEPARTMENT_ID , COUNT(*) 
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID ASC ;

-- 부서별 평균 급여(부서번호, 오름차순)
SELECT DEPARTMENT_ID , ROUND(AVG(SALARY)) 
FROM EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID ASC ;

-- 동일 직무의 사원 수 조회
SELECT JOB_ID , COUNT(*) 
FROM EMPLOYEES e 
GROUP BY JOB_ID
ORDER BY JOB_ID ;

-- 매니저가 관리하는 사원들 중 최소급여 조회
-- 단 매니저가 관리하는 사원들 중 최소급여가 6000 미만인 최소급여는 제외
-- 매니저가 없는 사원들은 제외
SELECT MANAGER_ID , MIN(SALARY)
FROM EMPLOYEES e
WHERE MANAGER_ID IS NOT NULL 
GROUP BY MANAGER_ID HAVING MIN(SALARY) >= 6000
ORDER BY MANAGER_ID ASC ;




-- 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기
SELECT
	E.EMPLOYEE_ID AS 내사원번호 ,
	E.HIRE_DATE AS 입사일 ,
	E.LAST_NAME AS 내이름,
	E.MANAGER_ID AS 매니저번호,
	E2.HIRE_DATE AS 매니저입사일
	-- E2.LAST_NAME
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	E.MANAGER_ID = E2.EMPLOYEE_ID
WHERE
	E.HIRE_DATE < E2.HIRE_DATE ;
-- JOIN EMPLOYEES e2 ON
--	E.MANAGER_ID = E2.EMPLOYEE_ID AND E.HIRE_DATE < E2.HIRE_DATE ; JOIN 에 묶어서도 표현 가능

-- 도시 이름이 T로 시작하는 지역에 사는 사원들의 사번, 성씨, 부서번호 조회
-- (도시명은 LOCATIONS 테이블에 )
SELECT
	E.EMPLOYEE_ID ,
	E.LAST_NAME ,
	E.DEPARTMENT_ID,
	L.CITY 
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATIONS l ON
	D.LOCATION_ID = L.LOCATION_ID
WHERE
	L.CITY LIKE 'T%' ;

-- 위치 아이디가 1700인 사원들의 성씨, 부서번호, 연봉 조회
SELECT
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	E.SALARY
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE
	D.LOCATION_ID = 1700 ;

-- 부서명, 위치 아이디, 각 부서별 사원 수, 각 부서별 평균 연봉 조회
-- 평균 연봉은 소수점 2자리까지만 표현
SELECT
	D.DEPARTMENT_NAME ,
	D.LOCATION_ID,
	COUNT(E.EMPLOYEE_ID),
	ROUND(AVG(E.SALARY), 2 )
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY
	D.DEPARTMENT_NAME ,
	D.LOCATION_ID
ORDER BY D.LOCATION_ID ;

-- EXECUTIVE 부서에 근무하는 사원들의 부서번호, 성씨, 잡아이디 조회
SELECT
	D.DEPARTMENT_ID ,
	E.LAST_NAME ,
	E.JOB_ID
FROM
	DEPARTMENTS d
JOIN EMPLOYEES e ON
	D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE
	D.DEPARTMENT_NAME = 'Executive' ;

-- 각 사원별 소속 부서에서 자신보다 늦게 고용되었으나 많은 연봉을 받는 사원이 존재하는
-- 사원들의 이름 조회 (이름은 퍼스트 네임과 라스트네임을 결합하여 하나로 나오게 하기)
-- 부서번호, 결합된 이름, 월급, 입사일 출력
SELECT DISTINCT 
	E.DEPARTMENT_ID AS 부서번호 ,
	E.FIRST_NAME || ' ' || E.LAST_NAME AS NAME,
	E.SALARY AS 급여 ,
	E.HIRE_DATE AS 입사일
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	E.DEPARTMENT_ID = E2.DEPARTMENT_ID
WHERE
	E.SALARY < E2.SALARY AND E.HIRE_DATE < E2.HIRE_DATE ;




-- 2024-01-26
-- 성씨에 u가 포함되는 사원들과 동일 부서에 근무하는 사원들의 사번 및 성씨 조회
SELECT E.EMPLOYEE_ID , E.LAST_NAME 
FROM EMPLOYEES E 
WHERE E.DEPARTMENT_ID IN (SELECT DISTINCT E2.DEPARTMENT_ID FROM EMPLOYEES E2 WHERE E2.LAST_NAME LIKE '%u%' )
ORDER BY E.EMPLOYEE_ID ASC ;

-- 기존에 하던 작업을 여전히 하고 있는 사원들의 사번 및 잡아이디 조회
SELECT E.EMPLOYEE_ID , E.JOB_ID 
FROM EMPLOYEES e 
WHERE (E.EMPLOYEE_ID , E.JOB_ID) IN
(SELECT JH.EMPLOYEE_ID , JH.JOB_ID 
FROM JOB_HISTORY jh ) ;

-- SELECT 절 서브쿼리 (스칼라 서브쿼리)
-- 각 직무별 연봉 총합 및 각 부서별 연봉 총합 조회
-- 직무별 연봉 총합, 부서별 연봉 총합, 전체 총합
-- 내가 푼 것 (실행됨, 틀림)
SELECT JOB_ID , DEPARTMENT_ID , SUM(SALARY) , (SELECT SUM(SALARY)  FROM EMPLOYEES e2)
FROM EMPLOYEES e 
GROUP BY JOB_ID , DEPARTMENT_ID
ORDER BY JOB_ID , DEPARTMENT_ID
;
--선생님이 푼 것
SELECT JOB_ID , (SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 10 AND E.JOB_ID = E2.JOB_ID) AS DEPT10 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 20 AND E.JOB_ID = E2.JOB_ID) AS DEPT20 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 30 AND E.JOB_ID = E2.JOB_ID) AS DEPT30 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 40 AND E.JOB_ID = E2.JOB_ID) AS DEPT40 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 50 AND E.JOB_ID = E2.JOB_ID) AS DEPT50 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 60 AND E.JOB_ID = E2.JOB_ID) AS DEPT60 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 70 AND E.JOB_ID = E2.JOB_ID) AS DEPT70 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 80 AND E.JOB_ID = E2.JOB_ID) AS DEPT80 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 90 AND E.JOB_ID = E2.JOB_ID) AS DEPT90 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 100 AND E.JOB_ID = E2.JOB_ID) AS DEPT100 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID = 110 AND E.JOB_ID = E2.JOB_ID) AS DEPT110 ,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE E.JOB_ID = E2.JOB_ID ) AS TOTAL
FROM EMPLOYEES e 
GROUP BY JOB_ID 
ORDER BY JOB_ID ;

-- 직무아이디 가 SA_MAN 인 사원들의 최대 연봉보다 높게 받는 사원들의 성씨, 직무아이디, 연봉 조회
SELECT
	E.LAST_NAME ,
	E.JOB_ID ,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	e.SALARY > (
	SELECT
		MAX(e.SALARY)
	FROM
		EMPLOYEES e
	WHERE
		e.JOB_ID = 'SA_MAN' ) ;

-- 커미션을 버는 사원들의 부서와 연봉이 동일한 사원들의 성씨, 부서번호, 연봉 조회
SELECT
	e.LAST_NAME ,
	e.DEPARTMENT_ID ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE 
	(e.DEPARTMENT_ID, e.SALARY ) IN (
	SELECT
		e2.DEPARTMENT_ID, e2.salary
	FROM
		EMPLOYEES e2
	WHERE
		e2.COMMISSION_PCT IS NOT NULL )

-- 회사 전체 평균 연봉보다 더 많이 버는 사원들 중 성씨에 u가 있는 사원들이 근무하는 부서에서 근무하는
-- 사원들의 사번, 성씨, 연봉 조회
SELECT
	e.EMPLOYEE_ID ,
	e.LAST_NAME ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	e.DEPARTMENT_ID IN (
	SELECT
		e2.DEPARTMENT_ID
	FROM
		EMPLOYEES e2
	WHERE
		e2.SALARY > (
		SELECT
			AVG(SALARY)
		FROM
			EMPLOYEES) AND e2.LAST_NAME LIKE '%u%');

-- 각 부서별 평균 연봉보다 더 받는 동일 부서 근무사원들의 성씨, 부서번호, 연봉 및 해당 부서 평균 연봉 조회
-- 부서별 연봉 기준으로 정렬
SELECT
	LAST_NAME ,
	e.DEPARTMENT_ID ,
	e.SALARY ,
	(
	SELECT
		round(AVG(SALARY),1)
	FROM
		EMPLOYEES e2
	WHERE
		e.DEPARTMENT_ID = e2.DEPARTMENT_ID) -- 사원정보 옆에 부서별 평균 연봉 출력
FROM
	EMPLOYEES e
WHERE
	e.SALARY > ANY (
	SELECT
		AVG(SALARY)
	FROM
		EMPLOYEES e2
	WHERE
		e.DEPARTMENT_ID = e2.DEPARTMENT_ID) -- 부서별 평균 연봉보다 높은 연봉 조건식
	ORDER BY DEPARTMENT_ID  ;
--선생님이 푸는 것







-- 성씨가 Davies 인 사람보다 후에 고용된 사원들의 성씨, 입사일 조회
SELECT
	LAST_NAME ,
	HIRE_DATE
FROM
	EMPLOYEES e
WHERE
	e.HIRE_DATE > (
	SELECT
		HIRE_DATE
	FROM
		EMPLOYEES e
	WHERE
		LAST_NAME = 'Davies' ) ;

-- 성씨가 King 인 사원을 매니저로 두고 있는 모든 사원들의 성씨, 연봉 조회
SELECT e.LAST_NAME , e.SALARY
FROM EMPLOYEES e
WHERE e.MANAGER_ID in (SELECT e2.EMPLOYEE_ID FROM EMPLOYEES e2 WHERE e2.LAST_NAME = 'King')
;

-- 성씨가 Kochhar 인 사원과 동일한 연봉 및 커미션을 버는 사원들의 성씨, 부서번호, 연봉 조회
-- Kochhar 는 제외
SELECT
	e.LAST_NAME ,
	e.DEPARTMENT_ID ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	( e.SALARY,
	nvl(e.COMMISSION_PCT,0) ) in (
	SELECT
		e2.SALARY ,
		nvl(e2.COMMISSION_PCT, 0)
	FROM
		EMPLOYEES e2
	WHERE
		e2.LAST_NAME = 'Kochhar') AND e.LAST_NAME != 'Kochhar'
;

-- 부서가 위치한 국가 아이디, 이름 조회
-- countries 테이블과 locations, departments 이용
SELECT
	c.COUNTRY_ID ,
	c.COUNTRY_NAME
FROM
	COUNTRIES c
WHERE
	c.country_id IN (
	SELECT
		l.COUNTRY_ID
	FROM
		LOCATIONS l ,
		(
		SELECT
			LOCATION_ID
		FROM
			DEPARTMENTS) d
	WHERE
		l.LOCATION_ID = d.location_id) ;

-- 총 사원 수 및 2013, 2014, 2015, 2016년도별 고용된 사원들의 총 수를 조회
SELECT
	DISTINCT (
	SELECT
		COUNT(EMPLOYEE_ID)
	FROM
		EMPLOYEES e) AS "총 사원 수" ,
	(
	SELECT
		COUNT(EMPLOYEE_ID)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'yyyy') = '2013') AS "2013",
	(
	SELECT
		COUNT(EMPLOYEE_ID)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'yyyy') = '2014') AS "2014",
	(
	SELECT
		COUNT(EMPLOYEE_ID)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'yyyy') = '2015') AS "2015",
	(
	SELECT
		COUNT(EMPLOYEE_ID)
	FROM
		EMPLOYEES e
	WHERE
		TO_CHAR(HIRE_DATE, 'yyyy') = '2016') AS "2016"
FROM
	EMPLOYEES e ;
--SELECT COUNT(EMPLOYEE_ID) FROM EMPLOYEES e WHERE TO_CHAR(HIRE_DATE, 'yy') = '13' ; 도 됨
--SELECT COUNT(EMPLOYEE_ID) FROM EMPLOYEES e WHERE HIRE_DATE LIKE '13%' ; 도 가능


-- 위치 아이디가 1700인 사원들의 연봉과 커미션을 추출, 추출한 사원들의 연봉과 커미션이 동일한 사원정보 조회
-- 사원번호, 이름+성씨 결합, 부서번호, 급여 출력
SELECT EMPLOYEE_ID , FIRST_NAME || ' ' || LAST_NAME AS name , DEPARTMENT_ID , SALARY
FROM EMPLOYEES e
WHERE (SALARY , nvl(COMMISSION_PCT, 0 ) ) = ANY ( SELECT e.SALARY , nvl(e.COMMISSION_PCT, 0) 
FROM EMPLOYEES e JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE d.LOCATION_ID = 1700 )  ;
-- 선생님이 푸는것
SELECT EMPLOYEE_ID , FIRST_NAME || ' ' || LAST_NAME AS name , DEPARTMENT_ID , SALARY
FROM EMPLOYEES e 
WHERE (salary, NVL(commission_pct,0)) IN (SELECT salary, NVL( COMMISSION_PCT , 0 )
FROM EMPLOYEES e 
WHERE e.department_id in (SELECT d.DEPARTMENT_ID 
FROM DEPARTMENTS d 
WHERE d.LOCATION_ID = 1700))
